// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cart.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace collaborative {
namespace ml {

namespace {

const ::google::protobuf::Descriptor* PB_EncryptedLabelVec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_EncryptedLabelVec_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_PruneConditionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_PruneConditionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_PruneCheckResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_PruneCheckResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_EncryptedLabelVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_EncryptedLabelVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_EncryptedStatPerSplit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_EncryptedStatPerSplit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_EncryptedStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_EncryptedStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_SplitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_SplitInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cart_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cart_2eproto() {
  protobuf_AddDesc_cart_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cart.proto");
  GOOGLE_CHECK(file != NULL);
  PB_EncryptedLabelVec_descriptor_ = file->message_type(0);
  static const int PB_EncryptedLabelVec_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedLabelVec, encrypted_label_),
  };
  PB_EncryptedLabelVec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_EncryptedLabelVec_descriptor_,
      PB_EncryptedLabelVec::default_instance_,
      PB_EncryptedLabelVec_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_EncryptedLabelVec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedLabelVec, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedLabelVec, _is_default_instance_));
  PB_PruneConditionResult_descriptor_ = file->message_type(1);
  static const int PB_PruneConditionResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneConditionResult, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneConditionResult, pruning_satisfied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneConditionResult, encrypted_label_vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneConditionResult, label_),
  };
  PB_PruneConditionResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_PruneConditionResult_descriptor_,
      PB_PruneConditionResult::default_instance_,
      PB_PruneConditionResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_PruneConditionResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneConditionResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneConditionResult, _is_default_instance_));
  PB_PruneCheckResult_descriptor_ = file->message_type(2);
  static const int PB_PruneCheckResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneCheckResult, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneCheckResult, is_satisfied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneCheckResult, label_),
  };
  PB_PruneCheckResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_PruneCheckResult_descriptor_,
      PB_PruneCheckResult::default_instance_,
      PB_PruneCheckResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_PruneCheckResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneCheckResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PruneCheckResult, _is_default_instance_));
  PB_EncryptedLabelVector_descriptor_ = file->message_type(3);
  static const int PB_EncryptedLabelVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedLabelVector, label_indicator_),
  };
  PB_EncryptedLabelVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_EncryptedLabelVector_descriptor_,
      PB_EncryptedLabelVector::default_instance_,
      PB_EncryptedLabelVector_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_EncryptedLabelVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedLabelVector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedLabelVector, _is_default_instance_));
  PB_EncryptedStatPerSplit_descriptor_ = file->message_type(4);
  static const int PB_EncryptedStatPerSplit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatPerSplit, encrypted_stat_),
  };
  PB_EncryptedStatPerSplit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_EncryptedStatPerSplit_descriptor_,
      PB_EncryptedStatPerSplit::default_instance_,
      PB_EncryptedStatPerSplit_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_EncryptedStatPerSplit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatPerSplit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatPerSplit, _is_default_instance_));
  PB_EncryptedStatistics_descriptor_ = file->message_type(5);
  static const int PB_EncryptedStatistics_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, local_split_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, classes_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, left_sample_nums_of_splits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, right_sample_nums_of_splits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, encrypted_stats_of_splits_),
  };
  PB_EncryptedStatistics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_EncryptedStatistics_descriptor_,
      PB_EncryptedStatistics::default_instance_,
      PB_EncryptedStatistics_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_EncryptedStatistics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EncryptedStatistics, _is_default_instance_));
  PB_UpdateInfo_descriptor_ = file->message_type(6);
  static const int PB_UpdateInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, source_client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, best_client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, best_feature_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, best_split_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, left_branch_impurity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, right_branch_impurity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, left_branch_sample_ivs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, right_branch_sample_ivs_),
  };
  PB_UpdateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_UpdateInfo_descriptor_,
      PB_UpdateInfo::default_instance_,
      PB_UpdateInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_UpdateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UpdateInfo, _is_default_instance_));
  PB_SplitInfo_descriptor_ = file->message_type(7);
  static const int PB_SplitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SplitInfo, global_split_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SplitInfo, split_num_vec_),
  };
  PB_SplitInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PB_SplitInfo_descriptor_,
      PB_SplitInfo::default_instance_,
      PB_SplitInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PB_SplitInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SplitInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SplitInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cart_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_EncryptedLabelVec_descriptor_, &PB_EncryptedLabelVec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_PruneConditionResult_descriptor_, &PB_PruneConditionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_PruneCheckResult_descriptor_, &PB_PruneCheckResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_EncryptedLabelVector_descriptor_, &PB_EncryptedLabelVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_EncryptedStatPerSplit_descriptor_, &PB_EncryptedStatPerSplit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_EncryptedStatistics_descriptor_, &PB_EncryptedStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_UpdateInfo_descriptor_, &PB_UpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PB_SplitInfo_descriptor_, &PB_SplitInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cart_2eproto() {
  delete PB_EncryptedLabelVec::default_instance_;
  delete PB_EncryptedLabelVec_reflection_;
  delete PB_PruneConditionResult::default_instance_;
  delete PB_PruneConditionResult_reflection_;
  delete PB_PruneCheckResult::default_instance_;
  delete PB_PruneCheckResult_reflection_;
  delete PB_EncryptedLabelVector::default_instance_;
  delete PB_EncryptedLabelVector_reflection_;
  delete PB_EncryptedStatPerSplit::default_instance_;
  delete PB_EncryptedStatPerSplit_reflection_;
  delete PB_EncryptedStatistics::default_instance_;
  delete PB_EncryptedStatistics_reflection_;
  delete PB_UpdateInfo::default_instance_;
  delete PB_UpdateInfo_reflection_;
  delete PB_SplitInfo::default_instance_;
  delete PB_SplitInfo_reflection_;
}

void protobuf_AddDesc_cart_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cart_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::collaborative::ml::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncart.proto\022\024com.collaborative.ml\032\014comm"
    "on.proto\"W\n\024PB_EncryptedLabelVec\022\?\n\017encr"
    "ypted_label\030\001 \003(\0132&.com.collaborative.ml"
    ".PB_EncodedNumber\"\310\001\n\027PB_PruneConditionR"
    "esult\022\022\n\nnode_index\030\001 \001(\005\022\031\n\021pruning_sat"
    "isfied\030\002 \001(\005\022G\n\023encrypted_label_vec\030\003 \003("
    "\0132*.com.collaborative.ml.PB_EncryptedLab"
    "elVec\0225\n\005label\030\004 \001(\0132&.com.collaborative"
    ".ml.PB_EncodedNumber\"v\n\023PB_PruneCheckRes"
    "ult\022\022\n\nnode_index\030\001 \001(\005\022\024\n\014is_satisfied\030"
    "\002 \001(\005\0225\n\005label\030\003 \001(\0132&.com.collaborative"
    ".ml.PB_EncodedNumber\"Z\n\027PB_EncryptedLabe"
    "lVector\022\?\n\017label_indicator\030\001 \003(\0132&.com.c"
    "ollaborative.ml.PB_EncodedNumber\"Z\n\030PB_E"
    "ncryptedStatPerSplit\022>\n\016encrypted_stat\030\001"
    " \003(\0132&.com.collaborative.ml.PB_EncodedNu"
    "mber\"\331\002\n\026PB_EncryptedStatistics\022\021\n\tclien"
    "t_id\030\001 \001(\005\022\022\n\nnode_index\030\002 \001(\005\022\027\n\017local_"
    "split_num\030\003 \001(\005\022\023\n\013classes_num\030\004 \001(\005\022J\n\032"
    "left_sample_nums_of_splits\030\005 \003(\0132&.com.c"
    "ollaborative.ml.PB_EncodedNumber\022K\n\033righ"
    "t_sample_nums_of_splits\030\006 \003(\0132&.com.coll"
    "aborative.ml.PB_EncodedNumber\022Q\n\031encrypt"
    "ed_stats_of_splits\030\007 \003(\0132..com.collabora"
    "tive.ml.PB_EncryptedStatPerSplit\"\217\003\n\rPB_"
    "UpdateInfo\022\030\n\020source_client_id\030\001 \001(\005\022\026\n\016"
    "best_client_id\030\002 \001(\005\022\027\n\017best_feature_id\030"
    "\003 \001(\005\022\025\n\rbest_split_id\030\004 \001(\005\022D\n\024left_bra"
    "nch_impurity\030\005 \001(\0132&.com.collaborative.m"
    "l.PB_EncodedNumber\022E\n\025right_branch_impur"
    "ity\030\006 \001(\0132&.com.collaborative.ml.PB_Enco"
    "dedNumber\022F\n\026left_branch_sample_ivs\030\007 \003("
    "\0132&.com.collaborative.ml.PB_EncodedNumbe"
    "r\022G\n\027right_branch_sample_ivs\030\010 \003(\0132&.com"
    ".collaborative.ml.PB_EncodedNumber\"\?\n\014PB"
    "_SplitInfo\022\030\n\020global_split_num\030\001 \001(\005\022\025\n\r"
    "split_num_vec\030\002 \003(\005b\006proto3", 1467);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cart.proto", &protobuf_RegisterTypes);
  PB_EncryptedLabelVec::default_instance_ = new PB_EncryptedLabelVec();
  PB_PruneConditionResult::default_instance_ = new PB_PruneConditionResult();
  PB_PruneCheckResult::default_instance_ = new PB_PruneCheckResult();
  PB_EncryptedLabelVector::default_instance_ = new PB_EncryptedLabelVector();
  PB_EncryptedStatPerSplit::default_instance_ = new PB_EncryptedStatPerSplit();
  PB_EncryptedStatistics::default_instance_ = new PB_EncryptedStatistics();
  PB_UpdateInfo::default_instance_ = new PB_UpdateInfo();
  PB_SplitInfo::default_instance_ = new PB_SplitInfo();
  PB_EncryptedLabelVec::default_instance_->InitAsDefaultInstance();
  PB_PruneConditionResult::default_instance_->InitAsDefaultInstance();
  PB_PruneCheckResult::default_instance_->InitAsDefaultInstance();
  PB_EncryptedLabelVector::default_instance_->InitAsDefaultInstance();
  PB_EncryptedStatPerSplit::default_instance_->InitAsDefaultInstance();
  PB_EncryptedStatistics::default_instance_->InitAsDefaultInstance();
  PB_UpdateInfo::default_instance_->InitAsDefaultInstance();
  PB_SplitInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cart_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cart_2eproto {
  StaticDescriptorInitializer_cart_2eproto() {
    protobuf_AddDesc_cart_2eproto();
  }
} static_descriptor_initializer_cart_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_EncryptedLabelVec::kEncryptedLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_EncryptedLabelVec::PB_EncryptedLabelVec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_EncryptedLabelVec)
}

void PB_EncryptedLabelVec::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PB_EncryptedLabelVec::PB_EncryptedLabelVec(const PB_EncryptedLabelVec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_EncryptedLabelVec)
}

void PB_EncryptedLabelVec::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PB_EncryptedLabelVec::~PB_EncryptedLabelVec() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_EncryptedLabelVec)
  SharedDtor();
}

void PB_EncryptedLabelVec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_EncryptedLabelVec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_EncryptedLabelVec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_EncryptedLabelVec_descriptor_;
}

const PB_EncryptedLabelVec& PB_EncryptedLabelVec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_EncryptedLabelVec* PB_EncryptedLabelVec::default_instance_ = NULL;

PB_EncryptedLabelVec* PB_EncryptedLabelVec::New(::google::protobuf::Arena* arena) const {
  PB_EncryptedLabelVec* n = new PB_EncryptedLabelVec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_EncryptedLabelVec::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_EncryptedLabelVec)
  encrypted_label_.Clear();
}

bool PB_EncryptedLabelVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_EncryptedLabelVec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_label = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_encrypted_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_encrypted_label()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_encrypted_label;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_EncryptedLabelVec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_EncryptedLabelVec)
  return false;
#undef DO_
}

void PB_EncryptedLabelVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_EncryptedLabelVec)
  // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_label = 1;
  for (unsigned int i = 0, n = this->encrypted_label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->encrypted_label(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_EncryptedLabelVec)
}

::google::protobuf::uint8* PB_EncryptedLabelVec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_EncryptedLabelVec)
  // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_label = 1;
  for (unsigned int i = 0, n = this->encrypted_label_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->encrypted_label(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_EncryptedLabelVec)
  return target;
}

int PB_EncryptedLabelVec::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_EncryptedLabelVec)
  int total_size = 0;

  // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_label = 1;
  total_size += 1 * this->encrypted_label_size();
  for (int i = 0; i < this->encrypted_label_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encrypted_label(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_EncryptedLabelVec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_EncryptedLabelVec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_EncryptedLabelVec* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_EncryptedLabelVec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_EncryptedLabelVec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_EncryptedLabelVec)
    MergeFrom(*source);
  }
}

void PB_EncryptedLabelVec::MergeFrom(const PB_EncryptedLabelVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_EncryptedLabelVec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  encrypted_label_.MergeFrom(from.encrypted_label_);
}

void PB_EncryptedLabelVec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_EncryptedLabelVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_EncryptedLabelVec::CopyFrom(const PB_EncryptedLabelVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_EncryptedLabelVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_EncryptedLabelVec::IsInitialized() const {

  return true;
}

void PB_EncryptedLabelVec::Swap(PB_EncryptedLabelVec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_EncryptedLabelVec::InternalSwap(PB_EncryptedLabelVec* other) {
  encrypted_label_.UnsafeArenaSwap(&other->encrypted_label_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_EncryptedLabelVec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_EncryptedLabelVec_descriptor_;
  metadata.reflection = PB_EncryptedLabelVec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_EncryptedLabelVec

// repeated .com.collaborative.ml.PB_EncodedNumber encrypted_label = 1;
int PB_EncryptedLabelVec::encrypted_label_size() const {
  return encrypted_label_.size();
}
void PB_EncryptedLabelVec::clear_encrypted_label() {
  encrypted_label_.Clear();
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_EncryptedLabelVec::encrypted_label(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedLabelVec.encrypted_label)
  return encrypted_label_.Get(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedLabelVec::mutable_encrypted_label(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_EncryptedLabelVec.encrypted_label)
  return encrypted_label_.Mutable(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedLabelVec::add_encrypted_label() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_EncryptedLabelVec.encrypted_label)
  return encrypted_label_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >*
PB_EncryptedLabelVec::mutable_encrypted_label() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_EncryptedLabelVec.encrypted_label)
  return &encrypted_label_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >&
PB_EncryptedLabelVec::encrypted_label() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_EncryptedLabelVec.encrypted_label)
  return encrypted_label_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_PruneConditionResult::kNodeIndexFieldNumber;
const int PB_PruneConditionResult::kPruningSatisfiedFieldNumber;
const int PB_PruneConditionResult::kEncryptedLabelVecFieldNumber;
const int PB_PruneConditionResult::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_PruneConditionResult::PB_PruneConditionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_PruneConditionResult)
}

void PB_PruneConditionResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  label_ = const_cast< ::com::collaborative::ml::PB_EncodedNumber*>(&::com::collaborative::ml::PB_EncodedNumber::default_instance());
}

PB_PruneConditionResult::PB_PruneConditionResult(const PB_PruneConditionResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_PruneConditionResult)
}

void PB_PruneConditionResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_index_ = 0;
  pruning_satisfied_ = 0;
  label_ = NULL;
}

PB_PruneConditionResult::~PB_PruneConditionResult() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_PruneConditionResult)
  SharedDtor();
}

void PB_PruneConditionResult::SharedDtor() {
  if (this != default_instance_) {
    delete label_;
  }
}

void PB_PruneConditionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_PruneConditionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_PruneConditionResult_descriptor_;
}

const PB_PruneConditionResult& PB_PruneConditionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_PruneConditionResult* PB_PruneConditionResult::default_instance_ = NULL;

PB_PruneConditionResult* PB_PruneConditionResult::New(::google::protobuf::Arena* arena) const {
  PB_PruneConditionResult* n = new PB_PruneConditionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_PruneConditionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_PruneConditionResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PB_PruneConditionResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PB_PruneConditionResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_index_, pruning_satisfied_);
  if (GetArenaNoVirtual() == NULL && label_ != NULL) delete label_;
  label_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  encrypted_label_vec_.Clear();
}

bool PB_PruneConditionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_PruneConditionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pruning_satisfied;
        break;
      }

      // optional int32 pruning_satisfied = 2;
      case 2: {
        if (tag == 16) {
         parse_pruning_satisfied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pruning_satisfied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_encrypted_label_vec;
        break;
      }

      // repeated .com.collaborative.ml.PB_EncryptedLabelVec encrypted_label_vec = 3;
      case 3: {
        if (tag == 26) {
         parse_encrypted_label_vec:
          DO_(input->IncrementRecursionDepth());
         parse_loop_encrypted_label_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_encrypted_label_vec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_encrypted_label_vec;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_label;
        break;
      }

      // optional .com.collaborative.ml.PB_EncodedNumber label = 4;
      case 4: {
        if (tag == 34) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_PruneConditionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_PruneConditionResult)
  return false;
#undef DO_
}

void PB_PruneConditionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_PruneConditionResult)
  // optional int32 node_index = 1;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_index(), output);
  }

  // optional int32 pruning_satisfied = 2;
  if (this->pruning_satisfied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pruning_satisfied(), output);
  }

  // repeated .com.collaborative.ml.PB_EncryptedLabelVec encrypted_label_vec = 3;
  for (unsigned int i = 0, n = this->encrypted_label_vec_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->encrypted_label_vec(i), output);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber label = 4;
  if (this->has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->label_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_PruneConditionResult)
}

::google::protobuf::uint8* PB_PruneConditionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_PruneConditionResult)
  // optional int32 node_index = 1;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_index(), target);
  }

  // optional int32 pruning_satisfied = 2;
  if (this->pruning_satisfied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pruning_satisfied(), target);
  }

  // repeated .com.collaborative.ml.PB_EncryptedLabelVec encrypted_label_vec = 3;
  for (unsigned int i = 0, n = this->encrypted_label_vec_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->encrypted_label_vec(i), false, target);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber label = 4;
  if (this->has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->label_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_PruneConditionResult)
  return target;
}

int PB_PruneConditionResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_PruneConditionResult)
  int total_size = 0;

  // optional int32 node_index = 1;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  // optional int32 pruning_satisfied = 2;
  if (this->pruning_satisfied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pruning_satisfied());
  }

  // optional .com.collaborative.ml.PB_EncodedNumber label = 4;
  if (this->has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->label_);
  }

  // repeated .com.collaborative.ml.PB_EncryptedLabelVec encrypted_label_vec = 3;
  total_size += 1 * this->encrypted_label_vec_size();
  for (int i = 0; i < this->encrypted_label_vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encrypted_label_vec(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_PruneConditionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_PruneConditionResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_PruneConditionResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_PruneConditionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_PruneConditionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_PruneConditionResult)
    MergeFrom(*source);
  }
}

void PB_PruneConditionResult::MergeFrom(const PB_PruneConditionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_PruneConditionResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  encrypted_label_vec_.MergeFrom(from.encrypted_label_vec_);
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
  if (from.pruning_satisfied() != 0) {
    set_pruning_satisfied(from.pruning_satisfied());
  }
  if (from.has_label()) {
    mutable_label()->::com::collaborative::ml::PB_EncodedNumber::MergeFrom(from.label());
  }
}

void PB_PruneConditionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_PruneConditionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PruneConditionResult::CopyFrom(const PB_PruneConditionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_PruneConditionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PruneConditionResult::IsInitialized() const {

  return true;
}

void PB_PruneConditionResult::Swap(PB_PruneConditionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_PruneConditionResult::InternalSwap(PB_PruneConditionResult* other) {
  std::swap(node_index_, other->node_index_);
  std::swap(pruning_satisfied_, other->pruning_satisfied_);
  encrypted_label_vec_.UnsafeArenaSwap(&other->encrypted_label_vec_);
  std::swap(label_, other->label_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_PruneConditionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_PruneConditionResult_descriptor_;
  metadata.reflection = PB_PruneConditionResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_PruneConditionResult

// optional int32 node_index = 1;
void PB_PruneConditionResult::clear_node_index() {
  node_index_ = 0;
}
 ::google::protobuf::int32 PB_PruneConditionResult::node_index() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_PruneConditionResult.node_index)
  return node_index_;
}
 void PB_PruneConditionResult::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_PruneConditionResult.node_index)
}

// optional int32 pruning_satisfied = 2;
void PB_PruneConditionResult::clear_pruning_satisfied() {
  pruning_satisfied_ = 0;
}
 ::google::protobuf::int32 PB_PruneConditionResult::pruning_satisfied() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_PruneConditionResult.pruning_satisfied)
  return pruning_satisfied_;
}
 void PB_PruneConditionResult::set_pruning_satisfied(::google::protobuf::int32 value) {
  
  pruning_satisfied_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_PruneConditionResult.pruning_satisfied)
}

// repeated .com.collaborative.ml.PB_EncryptedLabelVec encrypted_label_vec = 3;
int PB_PruneConditionResult::encrypted_label_vec_size() const {
  return encrypted_label_vec_.size();
}
void PB_PruneConditionResult::clear_encrypted_label_vec() {
  encrypted_label_vec_.Clear();
}
const ::com::collaborative::ml::PB_EncryptedLabelVec& PB_PruneConditionResult::encrypted_label_vec(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_PruneConditionResult.encrypted_label_vec)
  return encrypted_label_vec_.Get(index);
}
::com::collaborative::ml::PB_EncryptedLabelVec* PB_PruneConditionResult::mutable_encrypted_label_vec(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_PruneConditionResult.encrypted_label_vec)
  return encrypted_label_vec_.Mutable(index);
}
::com::collaborative::ml::PB_EncryptedLabelVec* PB_PruneConditionResult::add_encrypted_label_vec() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_PruneConditionResult.encrypted_label_vec)
  return encrypted_label_vec_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncryptedLabelVec >*
PB_PruneConditionResult::mutable_encrypted_label_vec() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_PruneConditionResult.encrypted_label_vec)
  return &encrypted_label_vec_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncryptedLabelVec >&
PB_PruneConditionResult::encrypted_label_vec() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_PruneConditionResult.encrypted_label_vec)
  return encrypted_label_vec_;
}

// optional .com.collaborative.ml.PB_EncodedNumber label = 4;
bool PB_PruneConditionResult::has_label() const {
  return !_is_default_instance_ && label_ != NULL;
}
void PB_PruneConditionResult::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) delete label_;
  label_ = NULL;
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_PruneConditionResult::label() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_PruneConditionResult.label)
  return label_ != NULL ? *label_ : *default_instance_->label_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_PruneConditionResult::mutable_label() {
  
  if (label_ == NULL) {
    label_ = new ::com::collaborative::ml::PB_EncodedNumber;
  }
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_PruneConditionResult.label)
  return label_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_PruneConditionResult::release_label() {
  // @@protoc_insertion_point(field_release:com.collaborative.ml.PB_PruneConditionResult.label)
  
  ::com::collaborative::ml::PB_EncodedNumber* temp = label_;
  label_ = NULL;
  return temp;
}
void PB_PruneConditionResult::set_allocated_label(::com::collaborative::ml::PB_EncodedNumber* label) {
  delete label_;
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.collaborative.ml.PB_PruneConditionResult.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_PruneCheckResult::kNodeIndexFieldNumber;
const int PB_PruneCheckResult::kIsSatisfiedFieldNumber;
const int PB_PruneCheckResult::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_PruneCheckResult::PB_PruneCheckResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_PruneCheckResult)
}

void PB_PruneCheckResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  label_ = const_cast< ::com::collaborative::ml::PB_EncodedNumber*>(&::com::collaborative::ml::PB_EncodedNumber::default_instance());
}

PB_PruneCheckResult::PB_PruneCheckResult(const PB_PruneCheckResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_PruneCheckResult)
}

void PB_PruneCheckResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_index_ = 0;
  is_satisfied_ = 0;
  label_ = NULL;
}

PB_PruneCheckResult::~PB_PruneCheckResult() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_PruneCheckResult)
  SharedDtor();
}

void PB_PruneCheckResult::SharedDtor() {
  if (this != default_instance_) {
    delete label_;
  }
}

void PB_PruneCheckResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_PruneCheckResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_PruneCheckResult_descriptor_;
}

const PB_PruneCheckResult& PB_PruneCheckResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_PruneCheckResult* PB_PruneCheckResult::default_instance_ = NULL;

PB_PruneCheckResult* PB_PruneCheckResult::New(::google::protobuf::Arena* arena) const {
  PB_PruneCheckResult* n = new PB_PruneCheckResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_PruneCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_PruneCheckResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PB_PruneCheckResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PB_PruneCheckResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_index_, is_satisfied_);
  if (GetArenaNoVirtual() == NULL && label_ != NULL) delete label_;
  label_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool PB_PruneCheckResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_PruneCheckResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_satisfied;
        break;
      }

      // optional int32 is_satisfied = 2;
      case 2: {
        if (tag == 16) {
         parse_is_satisfied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_satisfied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }

      // optional .com.collaborative.ml.PB_EncodedNumber label = 3;
      case 3: {
        if (tag == 26) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_PruneCheckResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_PruneCheckResult)
  return false;
#undef DO_
}

void PB_PruneCheckResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_PruneCheckResult)
  // optional int32 node_index = 1;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_index(), output);
  }

  // optional int32 is_satisfied = 2;
  if (this->is_satisfied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_satisfied(), output);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber label = 3;
  if (this->has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->label_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_PruneCheckResult)
}

::google::protobuf::uint8* PB_PruneCheckResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_PruneCheckResult)
  // optional int32 node_index = 1;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_index(), target);
  }

  // optional int32 is_satisfied = 2;
  if (this->is_satisfied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_satisfied(), target);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber label = 3;
  if (this->has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->label_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_PruneCheckResult)
  return target;
}

int PB_PruneCheckResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_PruneCheckResult)
  int total_size = 0;

  // optional int32 node_index = 1;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  // optional int32 is_satisfied = 2;
  if (this->is_satisfied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_satisfied());
  }

  // optional .com.collaborative.ml.PB_EncodedNumber label = 3;
  if (this->has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->label_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_PruneCheckResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_PruneCheckResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_PruneCheckResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_PruneCheckResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_PruneCheckResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_PruneCheckResult)
    MergeFrom(*source);
  }
}

void PB_PruneCheckResult::MergeFrom(const PB_PruneCheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_PruneCheckResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
  if (from.is_satisfied() != 0) {
    set_is_satisfied(from.is_satisfied());
  }
  if (from.has_label()) {
    mutable_label()->::com::collaborative::ml::PB_EncodedNumber::MergeFrom(from.label());
  }
}

void PB_PruneCheckResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_PruneCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PruneCheckResult::CopyFrom(const PB_PruneCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_PruneCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PruneCheckResult::IsInitialized() const {

  return true;
}

void PB_PruneCheckResult::Swap(PB_PruneCheckResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_PruneCheckResult::InternalSwap(PB_PruneCheckResult* other) {
  std::swap(node_index_, other->node_index_);
  std::swap(is_satisfied_, other->is_satisfied_);
  std::swap(label_, other->label_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_PruneCheckResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_PruneCheckResult_descriptor_;
  metadata.reflection = PB_PruneCheckResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_PruneCheckResult

// optional int32 node_index = 1;
void PB_PruneCheckResult::clear_node_index() {
  node_index_ = 0;
}
 ::google::protobuf::int32 PB_PruneCheckResult::node_index() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_PruneCheckResult.node_index)
  return node_index_;
}
 void PB_PruneCheckResult::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_PruneCheckResult.node_index)
}

// optional int32 is_satisfied = 2;
void PB_PruneCheckResult::clear_is_satisfied() {
  is_satisfied_ = 0;
}
 ::google::protobuf::int32 PB_PruneCheckResult::is_satisfied() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_PruneCheckResult.is_satisfied)
  return is_satisfied_;
}
 void PB_PruneCheckResult::set_is_satisfied(::google::protobuf::int32 value) {
  
  is_satisfied_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_PruneCheckResult.is_satisfied)
}

// optional .com.collaborative.ml.PB_EncodedNumber label = 3;
bool PB_PruneCheckResult::has_label() const {
  return !_is_default_instance_ && label_ != NULL;
}
void PB_PruneCheckResult::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) delete label_;
  label_ = NULL;
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_PruneCheckResult::label() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_PruneCheckResult.label)
  return label_ != NULL ? *label_ : *default_instance_->label_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_PruneCheckResult::mutable_label() {
  
  if (label_ == NULL) {
    label_ = new ::com::collaborative::ml::PB_EncodedNumber;
  }
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_PruneCheckResult.label)
  return label_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_PruneCheckResult::release_label() {
  // @@protoc_insertion_point(field_release:com.collaborative.ml.PB_PruneCheckResult.label)
  
  ::com::collaborative::ml::PB_EncodedNumber* temp = label_;
  label_ = NULL;
  return temp;
}
void PB_PruneCheckResult::set_allocated_label(::com::collaborative::ml::PB_EncodedNumber* label) {
  delete label_;
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.collaborative.ml.PB_PruneCheckResult.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_EncryptedLabelVector::kLabelIndicatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_EncryptedLabelVector::PB_EncryptedLabelVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_EncryptedLabelVector)
}

void PB_EncryptedLabelVector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PB_EncryptedLabelVector::PB_EncryptedLabelVector(const PB_EncryptedLabelVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_EncryptedLabelVector)
}

void PB_EncryptedLabelVector::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PB_EncryptedLabelVector::~PB_EncryptedLabelVector() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_EncryptedLabelVector)
  SharedDtor();
}

void PB_EncryptedLabelVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_EncryptedLabelVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_EncryptedLabelVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_EncryptedLabelVector_descriptor_;
}

const PB_EncryptedLabelVector& PB_EncryptedLabelVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_EncryptedLabelVector* PB_EncryptedLabelVector::default_instance_ = NULL;

PB_EncryptedLabelVector* PB_EncryptedLabelVector::New(::google::protobuf::Arena* arena) const {
  PB_EncryptedLabelVector* n = new PB_EncryptedLabelVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_EncryptedLabelVector::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_EncryptedLabelVector)
  label_indicator_.Clear();
}

bool PB_EncryptedLabelVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_EncryptedLabelVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.collaborative.ml.PB_EncodedNumber label_indicator = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_label_indicator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_label_indicator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_label_indicator;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_EncryptedLabelVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_EncryptedLabelVector)
  return false;
#undef DO_
}

void PB_EncryptedLabelVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_EncryptedLabelVector)
  // repeated .com.collaborative.ml.PB_EncodedNumber label_indicator = 1;
  for (unsigned int i = 0, n = this->label_indicator_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->label_indicator(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_EncryptedLabelVector)
}

::google::protobuf::uint8* PB_EncryptedLabelVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_EncryptedLabelVector)
  // repeated .com.collaborative.ml.PB_EncodedNumber label_indicator = 1;
  for (unsigned int i = 0, n = this->label_indicator_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->label_indicator(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_EncryptedLabelVector)
  return target;
}

int PB_EncryptedLabelVector::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_EncryptedLabelVector)
  int total_size = 0;

  // repeated .com.collaborative.ml.PB_EncodedNumber label_indicator = 1;
  total_size += 1 * this->label_indicator_size();
  for (int i = 0; i < this->label_indicator_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->label_indicator(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_EncryptedLabelVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_EncryptedLabelVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_EncryptedLabelVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_EncryptedLabelVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_EncryptedLabelVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_EncryptedLabelVector)
    MergeFrom(*source);
  }
}

void PB_EncryptedLabelVector::MergeFrom(const PB_EncryptedLabelVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_EncryptedLabelVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  label_indicator_.MergeFrom(from.label_indicator_);
}

void PB_EncryptedLabelVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_EncryptedLabelVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_EncryptedLabelVector::CopyFrom(const PB_EncryptedLabelVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_EncryptedLabelVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_EncryptedLabelVector::IsInitialized() const {

  return true;
}

void PB_EncryptedLabelVector::Swap(PB_EncryptedLabelVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_EncryptedLabelVector::InternalSwap(PB_EncryptedLabelVector* other) {
  label_indicator_.UnsafeArenaSwap(&other->label_indicator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_EncryptedLabelVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_EncryptedLabelVector_descriptor_;
  metadata.reflection = PB_EncryptedLabelVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_EncryptedLabelVector

// repeated .com.collaborative.ml.PB_EncodedNumber label_indicator = 1;
int PB_EncryptedLabelVector::label_indicator_size() const {
  return label_indicator_.size();
}
void PB_EncryptedLabelVector::clear_label_indicator() {
  label_indicator_.Clear();
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_EncryptedLabelVector::label_indicator(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedLabelVector.label_indicator)
  return label_indicator_.Get(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedLabelVector::mutable_label_indicator(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_EncryptedLabelVector.label_indicator)
  return label_indicator_.Mutable(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedLabelVector::add_label_indicator() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_EncryptedLabelVector.label_indicator)
  return label_indicator_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >*
PB_EncryptedLabelVector::mutable_label_indicator() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_EncryptedLabelVector.label_indicator)
  return &label_indicator_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >&
PB_EncryptedLabelVector::label_indicator() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_EncryptedLabelVector.label_indicator)
  return label_indicator_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_EncryptedStatPerSplit::kEncryptedStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_EncryptedStatPerSplit::PB_EncryptedStatPerSplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_EncryptedStatPerSplit)
}

void PB_EncryptedStatPerSplit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PB_EncryptedStatPerSplit::PB_EncryptedStatPerSplit(const PB_EncryptedStatPerSplit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_EncryptedStatPerSplit)
}

void PB_EncryptedStatPerSplit::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PB_EncryptedStatPerSplit::~PB_EncryptedStatPerSplit() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_EncryptedStatPerSplit)
  SharedDtor();
}

void PB_EncryptedStatPerSplit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_EncryptedStatPerSplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_EncryptedStatPerSplit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_EncryptedStatPerSplit_descriptor_;
}

const PB_EncryptedStatPerSplit& PB_EncryptedStatPerSplit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_EncryptedStatPerSplit* PB_EncryptedStatPerSplit::default_instance_ = NULL;

PB_EncryptedStatPerSplit* PB_EncryptedStatPerSplit::New(::google::protobuf::Arena* arena) const {
  PB_EncryptedStatPerSplit* n = new PB_EncryptedStatPerSplit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_EncryptedStatPerSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  encrypted_stat_.Clear();
}

bool PB_EncryptedStatPerSplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_stat = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_encrypted_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_encrypted_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_encrypted_stat;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_EncryptedStatPerSplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_EncryptedStatPerSplit)
  return false;
#undef DO_
}

void PB_EncryptedStatPerSplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_stat = 1;
  for (unsigned int i = 0, n = this->encrypted_stat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->encrypted_stat(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_EncryptedStatPerSplit)
}

::google::protobuf::uint8* PB_EncryptedStatPerSplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_stat = 1;
  for (unsigned int i = 0, n = this->encrypted_stat_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->encrypted_stat(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_EncryptedStatPerSplit)
  return target;
}

int PB_EncryptedStatPerSplit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  int total_size = 0;

  // repeated .com.collaborative.ml.PB_EncodedNumber encrypted_stat = 1;
  total_size += 1 * this->encrypted_stat_size();
  for (int i = 0; i < this->encrypted_stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encrypted_stat(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_EncryptedStatPerSplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_EncryptedStatPerSplit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_EncryptedStatPerSplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_EncryptedStatPerSplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_EncryptedStatPerSplit)
    MergeFrom(*source);
  }
}

void PB_EncryptedStatPerSplit::MergeFrom(const PB_EncryptedStatPerSplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  encrypted_stat_.MergeFrom(from.encrypted_stat_);
}

void PB_EncryptedStatPerSplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_EncryptedStatPerSplit::CopyFrom(const PB_EncryptedStatPerSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_EncryptedStatPerSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_EncryptedStatPerSplit::IsInitialized() const {

  return true;
}

void PB_EncryptedStatPerSplit::Swap(PB_EncryptedStatPerSplit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_EncryptedStatPerSplit::InternalSwap(PB_EncryptedStatPerSplit* other) {
  encrypted_stat_.UnsafeArenaSwap(&other->encrypted_stat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_EncryptedStatPerSplit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_EncryptedStatPerSplit_descriptor_;
  metadata.reflection = PB_EncryptedStatPerSplit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_EncryptedStatPerSplit

// repeated .com.collaborative.ml.PB_EncodedNumber encrypted_stat = 1;
int PB_EncryptedStatPerSplit::encrypted_stat_size() const {
  return encrypted_stat_.size();
}
void PB_EncryptedStatPerSplit::clear_encrypted_stat() {
  encrypted_stat_.Clear();
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_EncryptedStatPerSplit::encrypted_stat(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatPerSplit.encrypted_stat)
  return encrypted_stat_.Get(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedStatPerSplit::mutable_encrypted_stat(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_EncryptedStatPerSplit.encrypted_stat)
  return encrypted_stat_.Mutable(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedStatPerSplit::add_encrypted_stat() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_EncryptedStatPerSplit.encrypted_stat)
  return encrypted_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >*
PB_EncryptedStatPerSplit::mutable_encrypted_stat() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_EncryptedStatPerSplit.encrypted_stat)
  return &encrypted_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >&
PB_EncryptedStatPerSplit::encrypted_stat() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_EncryptedStatPerSplit.encrypted_stat)
  return encrypted_stat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_EncryptedStatistics::kClientIdFieldNumber;
const int PB_EncryptedStatistics::kNodeIndexFieldNumber;
const int PB_EncryptedStatistics::kLocalSplitNumFieldNumber;
const int PB_EncryptedStatistics::kClassesNumFieldNumber;
const int PB_EncryptedStatistics::kLeftSampleNumsOfSplitsFieldNumber;
const int PB_EncryptedStatistics::kRightSampleNumsOfSplitsFieldNumber;
const int PB_EncryptedStatistics::kEncryptedStatsOfSplitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_EncryptedStatistics::PB_EncryptedStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_EncryptedStatistics)
}

void PB_EncryptedStatistics::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PB_EncryptedStatistics::PB_EncryptedStatistics(const PB_EncryptedStatistics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_EncryptedStatistics)
}

void PB_EncryptedStatistics::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_id_ = 0;
  node_index_ = 0;
  local_split_num_ = 0;
  classes_num_ = 0;
}

PB_EncryptedStatistics::~PB_EncryptedStatistics() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_EncryptedStatistics)
  SharedDtor();
}

void PB_EncryptedStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_EncryptedStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_EncryptedStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_EncryptedStatistics_descriptor_;
}

const PB_EncryptedStatistics& PB_EncryptedStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_EncryptedStatistics* PB_EncryptedStatistics::default_instance_ = NULL;

PB_EncryptedStatistics* PB_EncryptedStatistics::New(::google::protobuf::Arena* arena) const {
  PB_EncryptedStatistics* n = new PB_EncryptedStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_EncryptedStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_EncryptedStatistics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PB_EncryptedStatistics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PB_EncryptedStatistics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(client_id_, classes_num_);

#undef ZR_HELPER_
#undef ZR_

  left_sample_nums_of_splits_.Clear();
  right_sample_nums_of_splits_.Clear();
  encrypted_stats_of_splits_.Clear();
}

bool PB_EncryptedStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_EncryptedStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_index;
        break;
      }

      // optional int32 node_index = 2;
      case 2: {
        if (tag == 16) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_local_split_num;
        break;
      }

      // optional int32 local_split_num = 3;
      case 3: {
        if (tag == 24) {
         parse_local_split_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_split_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_classes_num;
        break;
      }

      // optional int32 classes_num = 4;
      case 4: {
        if (tag == 32) {
         parse_classes_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classes_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_left_sample_nums_of_splits;
        break;
      }

      // repeated .com.collaborative.ml.PB_EncodedNumber left_sample_nums_of_splits = 5;
      case 5: {
        if (tag == 42) {
         parse_left_sample_nums_of_splits:
          DO_(input->IncrementRecursionDepth());
         parse_loop_left_sample_nums_of_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_left_sample_nums_of_splits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_left_sample_nums_of_splits;
        if (input->ExpectTag(50)) goto parse_loop_right_sample_nums_of_splits;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .com.collaborative.ml.PB_EncodedNumber right_sample_nums_of_splits = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_right_sample_nums_of_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_right_sample_nums_of_splits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_right_sample_nums_of_splits;
        if (input->ExpectTag(58)) goto parse_loop_encrypted_stats_of_splits;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .com.collaborative.ml.PB_EncryptedStatPerSplit encrypted_stats_of_splits = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_encrypted_stats_of_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_encrypted_stats_of_splits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_encrypted_stats_of_splits;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_EncryptedStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_EncryptedStatistics)
  return false;
#undef DO_
}

void PB_EncryptedStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_EncryptedStatistics)
  // optional int32 client_id = 1;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }

  // optional int32 node_index = 2;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_index(), output);
  }

  // optional int32 local_split_num = 3;
  if (this->local_split_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->local_split_num(), output);
  }

  // optional int32 classes_num = 4;
  if (this->classes_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->classes_num(), output);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber left_sample_nums_of_splits = 5;
  for (unsigned int i = 0, n = this->left_sample_nums_of_splits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->left_sample_nums_of_splits(i), output);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber right_sample_nums_of_splits = 6;
  for (unsigned int i = 0, n = this->right_sample_nums_of_splits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->right_sample_nums_of_splits(i), output);
  }

  // repeated .com.collaborative.ml.PB_EncryptedStatPerSplit encrypted_stats_of_splits = 7;
  for (unsigned int i = 0, n = this->encrypted_stats_of_splits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->encrypted_stats_of_splits(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_EncryptedStatistics)
}

::google::protobuf::uint8* PB_EncryptedStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_EncryptedStatistics)
  // optional int32 client_id = 1;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
  }

  // optional int32 node_index = 2;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_index(), target);
  }

  // optional int32 local_split_num = 3;
  if (this->local_split_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->local_split_num(), target);
  }

  // optional int32 classes_num = 4;
  if (this->classes_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->classes_num(), target);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber left_sample_nums_of_splits = 5;
  for (unsigned int i = 0, n = this->left_sample_nums_of_splits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->left_sample_nums_of_splits(i), false, target);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber right_sample_nums_of_splits = 6;
  for (unsigned int i = 0, n = this->right_sample_nums_of_splits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->right_sample_nums_of_splits(i), false, target);
  }

  // repeated .com.collaborative.ml.PB_EncryptedStatPerSplit encrypted_stats_of_splits = 7;
  for (unsigned int i = 0, n = this->encrypted_stats_of_splits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->encrypted_stats_of_splits(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_EncryptedStatistics)
  return target;
}

int PB_EncryptedStatistics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_EncryptedStatistics)
  int total_size = 0;

  // optional int32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_id());
  }

  // optional int32 node_index = 2;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  // optional int32 local_split_num = 3;
  if (this->local_split_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_split_num());
  }

  // optional int32 classes_num = 4;
  if (this->classes_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->classes_num());
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber left_sample_nums_of_splits = 5;
  total_size += 1 * this->left_sample_nums_of_splits_size();
  for (int i = 0; i < this->left_sample_nums_of_splits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_sample_nums_of_splits(i));
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber right_sample_nums_of_splits = 6;
  total_size += 1 * this->right_sample_nums_of_splits_size();
  for (int i = 0; i < this->right_sample_nums_of_splits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->right_sample_nums_of_splits(i));
  }

  // repeated .com.collaborative.ml.PB_EncryptedStatPerSplit encrypted_stats_of_splits = 7;
  total_size += 1 * this->encrypted_stats_of_splits_size();
  for (int i = 0; i < this->encrypted_stats_of_splits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encrypted_stats_of_splits(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_EncryptedStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_EncryptedStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_EncryptedStatistics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_EncryptedStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_EncryptedStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_EncryptedStatistics)
    MergeFrom(*source);
  }
}

void PB_EncryptedStatistics::MergeFrom(const PB_EncryptedStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_EncryptedStatistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  left_sample_nums_of_splits_.MergeFrom(from.left_sample_nums_of_splits_);
  right_sample_nums_of_splits_.MergeFrom(from.right_sample_nums_of_splits_);
  encrypted_stats_of_splits_.MergeFrom(from.encrypted_stats_of_splits_);
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
  if (from.local_split_num() != 0) {
    set_local_split_num(from.local_split_num());
  }
  if (from.classes_num() != 0) {
    set_classes_num(from.classes_num());
  }
}

void PB_EncryptedStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_EncryptedStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_EncryptedStatistics::CopyFrom(const PB_EncryptedStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_EncryptedStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_EncryptedStatistics::IsInitialized() const {

  return true;
}

void PB_EncryptedStatistics::Swap(PB_EncryptedStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_EncryptedStatistics::InternalSwap(PB_EncryptedStatistics* other) {
  std::swap(client_id_, other->client_id_);
  std::swap(node_index_, other->node_index_);
  std::swap(local_split_num_, other->local_split_num_);
  std::swap(classes_num_, other->classes_num_);
  left_sample_nums_of_splits_.UnsafeArenaSwap(&other->left_sample_nums_of_splits_);
  right_sample_nums_of_splits_.UnsafeArenaSwap(&other->right_sample_nums_of_splits_);
  encrypted_stats_of_splits_.UnsafeArenaSwap(&other->encrypted_stats_of_splits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_EncryptedStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_EncryptedStatistics_descriptor_;
  metadata.reflection = PB_EncryptedStatistics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_EncryptedStatistics

// optional int32 client_id = 1;
void PB_EncryptedStatistics::clear_client_id() {
  client_id_ = 0;
}
 ::google::protobuf::int32 PB_EncryptedStatistics::client_id() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatistics.client_id)
  return client_id_;
}
 void PB_EncryptedStatistics::set_client_id(::google::protobuf::int32 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_EncryptedStatistics.client_id)
}

// optional int32 node_index = 2;
void PB_EncryptedStatistics::clear_node_index() {
  node_index_ = 0;
}
 ::google::protobuf::int32 PB_EncryptedStatistics::node_index() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatistics.node_index)
  return node_index_;
}
 void PB_EncryptedStatistics::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_EncryptedStatistics.node_index)
}

// optional int32 local_split_num = 3;
void PB_EncryptedStatistics::clear_local_split_num() {
  local_split_num_ = 0;
}
 ::google::protobuf::int32 PB_EncryptedStatistics::local_split_num() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatistics.local_split_num)
  return local_split_num_;
}
 void PB_EncryptedStatistics::set_local_split_num(::google::protobuf::int32 value) {
  
  local_split_num_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_EncryptedStatistics.local_split_num)
}

// optional int32 classes_num = 4;
void PB_EncryptedStatistics::clear_classes_num() {
  classes_num_ = 0;
}
 ::google::protobuf::int32 PB_EncryptedStatistics::classes_num() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatistics.classes_num)
  return classes_num_;
}
 void PB_EncryptedStatistics::set_classes_num(::google::protobuf::int32 value) {
  
  classes_num_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_EncryptedStatistics.classes_num)
}

// repeated .com.collaborative.ml.PB_EncodedNumber left_sample_nums_of_splits = 5;
int PB_EncryptedStatistics::left_sample_nums_of_splits_size() const {
  return left_sample_nums_of_splits_.size();
}
void PB_EncryptedStatistics::clear_left_sample_nums_of_splits() {
  left_sample_nums_of_splits_.Clear();
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_EncryptedStatistics::left_sample_nums_of_splits(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatistics.left_sample_nums_of_splits)
  return left_sample_nums_of_splits_.Get(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedStatistics::mutable_left_sample_nums_of_splits(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_EncryptedStatistics.left_sample_nums_of_splits)
  return left_sample_nums_of_splits_.Mutable(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedStatistics::add_left_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_EncryptedStatistics.left_sample_nums_of_splits)
  return left_sample_nums_of_splits_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >*
PB_EncryptedStatistics::mutable_left_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_EncryptedStatistics.left_sample_nums_of_splits)
  return &left_sample_nums_of_splits_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >&
PB_EncryptedStatistics::left_sample_nums_of_splits() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_EncryptedStatistics.left_sample_nums_of_splits)
  return left_sample_nums_of_splits_;
}

// repeated .com.collaborative.ml.PB_EncodedNumber right_sample_nums_of_splits = 6;
int PB_EncryptedStatistics::right_sample_nums_of_splits_size() const {
  return right_sample_nums_of_splits_.size();
}
void PB_EncryptedStatistics::clear_right_sample_nums_of_splits() {
  right_sample_nums_of_splits_.Clear();
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_EncryptedStatistics::right_sample_nums_of_splits(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatistics.right_sample_nums_of_splits)
  return right_sample_nums_of_splits_.Get(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedStatistics::mutable_right_sample_nums_of_splits(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_EncryptedStatistics.right_sample_nums_of_splits)
  return right_sample_nums_of_splits_.Mutable(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_EncryptedStatistics::add_right_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_EncryptedStatistics.right_sample_nums_of_splits)
  return right_sample_nums_of_splits_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >*
PB_EncryptedStatistics::mutable_right_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_EncryptedStatistics.right_sample_nums_of_splits)
  return &right_sample_nums_of_splits_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >&
PB_EncryptedStatistics::right_sample_nums_of_splits() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_EncryptedStatistics.right_sample_nums_of_splits)
  return right_sample_nums_of_splits_;
}

// repeated .com.collaborative.ml.PB_EncryptedStatPerSplit encrypted_stats_of_splits = 7;
int PB_EncryptedStatistics::encrypted_stats_of_splits_size() const {
  return encrypted_stats_of_splits_.size();
}
void PB_EncryptedStatistics::clear_encrypted_stats_of_splits() {
  encrypted_stats_of_splits_.Clear();
}
const ::com::collaborative::ml::PB_EncryptedStatPerSplit& PB_EncryptedStatistics::encrypted_stats_of_splits(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_EncryptedStatistics.encrypted_stats_of_splits)
  return encrypted_stats_of_splits_.Get(index);
}
::com::collaborative::ml::PB_EncryptedStatPerSplit* PB_EncryptedStatistics::mutable_encrypted_stats_of_splits(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_EncryptedStatistics.encrypted_stats_of_splits)
  return encrypted_stats_of_splits_.Mutable(index);
}
::com::collaborative::ml::PB_EncryptedStatPerSplit* PB_EncryptedStatistics::add_encrypted_stats_of_splits() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_EncryptedStatistics.encrypted_stats_of_splits)
  return encrypted_stats_of_splits_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncryptedStatPerSplit >*
PB_EncryptedStatistics::mutable_encrypted_stats_of_splits() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_EncryptedStatistics.encrypted_stats_of_splits)
  return &encrypted_stats_of_splits_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncryptedStatPerSplit >&
PB_EncryptedStatistics::encrypted_stats_of_splits() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_EncryptedStatistics.encrypted_stats_of_splits)
  return encrypted_stats_of_splits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_UpdateInfo::kSourceClientIdFieldNumber;
const int PB_UpdateInfo::kBestClientIdFieldNumber;
const int PB_UpdateInfo::kBestFeatureIdFieldNumber;
const int PB_UpdateInfo::kBestSplitIdFieldNumber;
const int PB_UpdateInfo::kLeftBranchImpurityFieldNumber;
const int PB_UpdateInfo::kRightBranchImpurityFieldNumber;
const int PB_UpdateInfo::kLeftBranchSampleIvsFieldNumber;
const int PB_UpdateInfo::kRightBranchSampleIvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_UpdateInfo::PB_UpdateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_UpdateInfo)
}

void PB_UpdateInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  left_branch_impurity_ = const_cast< ::com::collaborative::ml::PB_EncodedNumber*>(&::com::collaborative::ml::PB_EncodedNumber::default_instance());
  right_branch_impurity_ = const_cast< ::com::collaborative::ml::PB_EncodedNumber*>(&::com::collaborative::ml::PB_EncodedNumber::default_instance());
}

PB_UpdateInfo::PB_UpdateInfo(const PB_UpdateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_UpdateInfo)
}

void PB_UpdateInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  source_client_id_ = 0;
  best_client_id_ = 0;
  best_feature_id_ = 0;
  best_split_id_ = 0;
  left_branch_impurity_ = NULL;
  right_branch_impurity_ = NULL;
}

PB_UpdateInfo::~PB_UpdateInfo() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_UpdateInfo)
  SharedDtor();
}

void PB_UpdateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete left_branch_impurity_;
    delete right_branch_impurity_;
  }
}

void PB_UpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UpdateInfo_descriptor_;
}

const PB_UpdateInfo& PB_UpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_UpdateInfo* PB_UpdateInfo::default_instance_ = NULL;

PB_UpdateInfo* PB_UpdateInfo::New(::google::protobuf::Arena* arena) const {
  PB_UpdateInfo* n = new PB_UpdateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_UpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_UpdateInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PB_UpdateInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PB_UpdateInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(source_client_id_, best_split_id_);
  if (GetArenaNoVirtual() == NULL && left_branch_impurity_ != NULL) delete left_branch_impurity_;
  left_branch_impurity_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_branch_impurity_ != NULL) delete right_branch_impurity_;
  right_branch_impurity_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  left_branch_sample_ivs_.Clear();
  right_branch_sample_ivs_.Clear();
}

bool PB_UpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_UpdateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 source_client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_best_client_id;
        break;
      }

      // optional int32 best_client_id = 2;
      case 2: {
        if (tag == 16) {
         parse_best_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_best_feature_id;
        break;
      }

      // optional int32 best_feature_id = 3;
      case 3: {
        if (tag == 24) {
         parse_best_feature_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_feature_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_best_split_id;
        break;
      }

      // optional int32 best_split_id = 4;
      case 4: {
        if (tag == 32) {
         parse_best_split_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_split_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_left_branch_impurity;
        break;
      }

      // optional .com.collaborative.ml.PB_EncodedNumber left_branch_impurity = 5;
      case 5: {
        if (tag == 42) {
         parse_left_branch_impurity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_branch_impurity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_right_branch_impurity;
        break;
      }

      // optional .com.collaborative.ml.PB_EncodedNumber right_branch_impurity = 6;
      case 6: {
        if (tag == 50) {
         parse_right_branch_impurity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_branch_impurity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_left_branch_sample_ivs;
        break;
      }

      // repeated .com.collaborative.ml.PB_EncodedNumber left_branch_sample_ivs = 7;
      case 7: {
        if (tag == 58) {
         parse_left_branch_sample_ivs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_left_branch_sample_ivs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_left_branch_sample_ivs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_left_branch_sample_ivs;
        if (input->ExpectTag(66)) goto parse_loop_right_branch_sample_ivs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .com.collaborative.ml.PB_EncodedNumber right_branch_sample_ivs = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_right_branch_sample_ivs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_right_branch_sample_ivs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_right_branch_sample_ivs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_UpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_UpdateInfo)
  return false;
#undef DO_
}

void PB_UpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_UpdateInfo)
  // optional int32 source_client_id = 1;
  if (this->source_client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source_client_id(), output);
  }

  // optional int32 best_client_id = 2;
  if (this->best_client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->best_client_id(), output);
  }

  // optional int32 best_feature_id = 3;
  if (this->best_feature_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->best_feature_id(), output);
  }

  // optional int32 best_split_id = 4;
  if (this->best_split_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->best_split_id(), output);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber left_branch_impurity = 5;
  if (this->has_left_branch_impurity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->left_branch_impurity_, output);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber right_branch_impurity = 6;
  if (this->has_right_branch_impurity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->right_branch_impurity_, output);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber left_branch_sample_ivs = 7;
  for (unsigned int i = 0, n = this->left_branch_sample_ivs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->left_branch_sample_ivs(i), output);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber right_branch_sample_ivs = 8;
  for (unsigned int i = 0, n = this->right_branch_sample_ivs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->right_branch_sample_ivs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_UpdateInfo)
}

::google::protobuf::uint8* PB_UpdateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_UpdateInfo)
  // optional int32 source_client_id = 1;
  if (this->source_client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source_client_id(), target);
  }

  // optional int32 best_client_id = 2;
  if (this->best_client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->best_client_id(), target);
  }

  // optional int32 best_feature_id = 3;
  if (this->best_feature_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->best_feature_id(), target);
  }

  // optional int32 best_split_id = 4;
  if (this->best_split_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->best_split_id(), target);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber left_branch_impurity = 5;
  if (this->has_left_branch_impurity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->left_branch_impurity_, false, target);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber right_branch_impurity = 6;
  if (this->has_right_branch_impurity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->right_branch_impurity_, false, target);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber left_branch_sample_ivs = 7;
  for (unsigned int i = 0, n = this->left_branch_sample_ivs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->left_branch_sample_ivs(i), false, target);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber right_branch_sample_ivs = 8;
  for (unsigned int i = 0, n = this->right_branch_sample_ivs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->right_branch_sample_ivs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_UpdateInfo)
  return target;
}

int PB_UpdateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_UpdateInfo)
  int total_size = 0;

  // optional int32 source_client_id = 1;
  if (this->source_client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_client_id());
  }

  // optional int32 best_client_id = 2;
  if (this->best_client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->best_client_id());
  }

  // optional int32 best_feature_id = 3;
  if (this->best_feature_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->best_feature_id());
  }

  // optional int32 best_split_id = 4;
  if (this->best_split_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->best_split_id());
  }

  // optional .com.collaborative.ml.PB_EncodedNumber left_branch_impurity = 5;
  if (this->has_left_branch_impurity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_branch_impurity_);
  }

  // optional .com.collaborative.ml.PB_EncodedNumber right_branch_impurity = 6;
  if (this->has_right_branch_impurity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_branch_impurity_);
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber left_branch_sample_ivs = 7;
  total_size += 1 * this->left_branch_sample_ivs_size();
  for (int i = 0; i < this->left_branch_sample_ivs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_branch_sample_ivs(i));
  }

  // repeated .com.collaborative.ml.PB_EncodedNumber right_branch_sample_ivs = 8;
  total_size += 1 * this->right_branch_sample_ivs_size();
  for (int i = 0; i < this->right_branch_sample_ivs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->right_branch_sample_ivs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_UpdateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_UpdateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_UpdateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_UpdateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_UpdateInfo)
    MergeFrom(*source);
  }
}

void PB_UpdateInfo::MergeFrom(const PB_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_UpdateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  left_branch_sample_ivs_.MergeFrom(from.left_branch_sample_ivs_);
  right_branch_sample_ivs_.MergeFrom(from.right_branch_sample_ivs_);
  if (from.source_client_id() != 0) {
    set_source_client_id(from.source_client_id());
  }
  if (from.best_client_id() != 0) {
    set_best_client_id(from.best_client_id());
  }
  if (from.best_feature_id() != 0) {
    set_best_feature_id(from.best_feature_id());
  }
  if (from.best_split_id() != 0) {
    set_best_split_id(from.best_split_id());
  }
  if (from.has_left_branch_impurity()) {
    mutable_left_branch_impurity()->::com::collaborative::ml::PB_EncodedNumber::MergeFrom(from.left_branch_impurity());
  }
  if (from.has_right_branch_impurity()) {
    mutable_right_branch_impurity()->::com::collaborative::ml::PB_EncodedNumber::MergeFrom(from.right_branch_impurity());
  }
}

void PB_UpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_UpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UpdateInfo::CopyFrom(const PB_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_UpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UpdateInfo::IsInitialized() const {

  return true;
}

void PB_UpdateInfo::Swap(PB_UpdateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_UpdateInfo::InternalSwap(PB_UpdateInfo* other) {
  std::swap(source_client_id_, other->source_client_id_);
  std::swap(best_client_id_, other->best_client_id_);
  std::swap(best_feature_id_, other->best_feature_id_);
  std::swap(best_split_id_, other->best_split_id_);
  std::swap(left_branch_impurity_, other->left_branch_impurity_);
  std::swap(right_branch_impurity_, other->right_branch_impurity_);
  left_branch_sample_ivs_.UnsafeArenaSwap(&other->left_branch_sample_ivs_);
  right_branch_sample_ivs_.UnsafeArenaSwap(&other->right_branch_sample_ivs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_UpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UpdateInfo_descriptor_;
  metadata.reflection = PB_UpdateInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_UpdateInfo

// optional int32 source_client_id = 1;
void PB_UpdateInfo::clear_source_client_id() {
  source_client_id_ = 0;
}
 ::google::protobuf::int32 PB_UpdateInfo::source_client_id() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.source_client_id)
  return source_client_id_;
}
 void PB_UpdateInfo::set_source_client_id(::google::protobuf::int32 value) {
  
  source_client_id_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_UpdateInfo.source_client_id)
}

// optional int32 best_client_id = 2;
void PB_UpdateInfo::clear_best_client_id() {
  best_client_id_ = 0;
}
 ::google::protobuf::int32 PB_UpdateInfo::best_client_id() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.best_client_id)
  return best_client_id_;
}
 void PB_UpdateInfo::set_best_client_id(::google::protobuf::int32 value) {
  
  best_client_id_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_UpdateInfo.best_client_id)
}

// optional int32 best_feature_id = 3;
void PB_UpdateInfo::clear_best_feature_id() {
  best_feature_id_ = 0;
}
 ::google::protobuf::int32 PB_UpdateInfo::best_feature_id() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.best_feature_id)
  return best_feature_id_;
}
 void PB_UpdateInfo::set_best_feature_id(::google::protobuf::int32 value) {
  
  best_feature_id_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_UpdateInfo.best_feature_id)
}

// optional int32 best_split_id = 4;
void PB_UpdateInfo::clear_best_split_id() {
  best_split_id_ = 0;
}
 ::google::protobuf::int32 PB_UpdateInfo::best_split_id() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.best_split_id)
  return best_split_id_;
}
 void PB_UpdateInfo::set_best_split_id(::google::protobuf::int32 value) {
  
  best_split_id_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_UpdateInfo.best_split_id)
}

// optional .com.collaborative.ml.PB_EncodedNumber left_branch_impurity = 5;
bool PB_UpdateInfo::has_left_branch_impurity() const {
  return !_is_default_instance_ && left_branch_impurity_ != NULL;
}
void PB_UpdateInfo::clear_left_branch_impurity() {
  if (GetArenaNoVirtual() == NULL && left_branch_impurity_ != NULL) delete left_branch_impurity_;
  left_branch_impurity_ = NULL;
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_UpdateInfo::left_branch_impurity() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.left_branch_impurity)
  return left_branch_impurity_ != NULL ? *left_branch_impurity_ : *default_instance_->left_branch_impurity_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::mutable_left_branch_impurity() {
  
  if (left_branch_impurity_ == NULL) {
    left_branch_impurity_ = new ::com::collaborative::ml::PB_EncodedNumber;
  }
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_UpdateInfo.left_branch_impurity)
  return left_branch_impurity_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::release_left_branch_impurity() {
  // @@protoc_insertion_point(field_release:com.collaborative.ml.PB_UpdateInfo.left_branch_impurity)
  
  ::com::collaborative::ml::PB_EncodedNumber* temp = left_branch_impurity_;
  left_branch_impurity_ = NULL;
  return temp;
}
void PB_UpdateInfo::set_allocated_left_branch_impurity(::com::collaborative::ml::PB_EncodedNumber* left_branch_impurity) {
  delete left_branch_impurity_;
  left_branch_impurity_ = left_branch_impurity;
  if (left_branch_impurity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.collaborative.ml.PB_UpdateInfo.left_branch_impurity)
}

// optional .com.collaborative.ml.PB_EncodedNumber right_branch_impurity = 6;
bool PB_UpdateInfo::has_right_branch_impurity() const {
  return !_is_default_instance_ && right_branch_impurity_ != NULL;
}
void PB_UpdateInfo::clear_right_branch_impurity() {
  if (GetArenaNoVirtual() == NULL && right_branch_impurity_ != NULL) delete right_branch_impurity_;
  right_branch_impurity_ = NULL;
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_UpdateInfo::right_branch_impurity() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.right_branch_impurity)
  return right_branch_impurity_ != NULL ? *right_branch_impurity_ : *default_instance_->right_branch_impurity_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::mutable_right_branch_impurity() {
  
  if (right_branch_impurity_ == NULL) {
    right_branch_impurity_ = new ::com::collaborative::ml::PB_EncodedNumber;
  }
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_UpdateInfo.right_branch_impurity)
  return right_branch_impurity_;
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::release_right_branch_impurity() {
  // @@protoc_insertion_point(field_release:com.collaborative.ml.PB_UpdateInfo.right_branch_impurity)
  
  ::com::collaborative::ml::PB_EncodedNumber* temp = right_branch_impurity_;
  right_branch_impurity_ = NULL;
  return temp;
}
void PB_UpdateInfo::set_allocated_right_branch_impurity(::com::collaborative::ml::PB_EncodedNumber* right_branch_impurity) {
  delete right_branch_impurity_;
  right_branch_impurity_ = right_branch_impurity;
  if (right_branch_impurity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.collaborative.ml.PB_UpdateInfo.right_branch_impurity)
}

// repeated .com.collaborative.ml.PB_EncodedNumber left_branch_sample_ivs = 7;
int PB_UpdateInfo::left_branch_sample_ivs_size() const {
  return left_branch_sample_ivs_.size();
}
void PB_UpdateInfo::clear_left_branch_sample_ivs() {
  left_branch_sample_ivs_.Clear();
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_UpdateInfo::left_branch_sample_ivs(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.left_branch_sample_ivs)
  return left_branch_sample_ivs_.Get(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::mutable_left_branch_sample_ivs(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_UpdateInfo.left_branch_sample_ivs)
  return left_branch_sample_ivs_.Mutable(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::add_left_branch_sample_ivs() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_UpdateInfo.left_branch_sample_ivs)
  return left_branch_sample_ivs_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >*
PB_UpdateInfo::mutable_left_branch_sample_ivs() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_UpdateInfo.left_branch_sample_ivs)
  return &left_branch_sample_ivs_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >&
PB_UpdateInfo::left_branch_sample_ivs() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_UpdateInfo.left_branch_sample_ivs)
  return left_branch_sample_ivs_;
}

// repeated .com.collaborative.ml.PB_EncodedNumber right_branch_sample_ivs = 8;
int PB_UpdateInfo::right_branch_sample_ivs_size() const {
  return right_branch_sample_ivs_.size();
}
void PB_UpdateInfo::clear_right_branch_sample_ivs() {
  right_branch_sample_ivs_.Clear();
}
const ::com::collaborative::ml::PB_EncodedNumber& PB_UpdateInfo::right_branch_sample_ivs(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_UpdateInfo.right_branch_sample_ivs)
  return right_branch_sample_ivs_.Get(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::mutable_right_branch_sample_ivs(int index) {
  // @@protoc_insertion_point(field_mutable:com.collaborative.ml.PB_UpdateInfo.right_branch_sample_ivs)
  return right_branch_sample_ivs_.Mutable(index);
}
::com::collaborative::ml::PB_EncodedNumber* PB_UpdateInfo::add_right_branch_sample_ivs() {
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_UpdateInfo.right_branch_sample_ivs)
  return right_branch_sample_ivs_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >*
PB_UpdateInfo::mutable_right_branch_sample_ivs() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_UpdateInfo.right_branch_sample_ivs)
  return &right_branch_sample_ivs_;
}
const ::google::protobuf::RepeatedPtrField< ::com::collaborative::ml::PB_EncodedNumber >&
PB_UpdateInfo::right_branch_sample_ivs() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_UpdateInfo.right_branch_sample_ivs)
  return right_branch_sample_ivs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PB_SplitInfo::kGlobalSplitNumFieldNumber;
const int PB_SplitInfo::kSplitNumVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PB_SplitInfo::PB_SplitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.collaborative.ml.PB_SplitInfo)
}

void PB_SplitInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PB_SplitInfo::PB_SplitInfo(const PB_SplitInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.collaborative.ml.PB_SplitInfo)
}

void PB_SplitInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  global_split_num_ = 0;
}

PB_SplitInfo::~PB_SplitInfo() {
  // @@protoc_insertion_point(destructor:com.collaborative.ml.PB_SplitInfo)
  SharedDtor();
}

void PB_SplitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_SplitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_SplitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_SplitInfo_descriptor_;
}

const PB_SplitInfo& PB_SplitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cart_2eproto();
  return *default_instance_;
}

PB_SplitInfo* PB_SplitInfo::default_instance_ = NULL;

PB_SplitInfo* PB_SplitInfo::New(::google::protobuf::Arena* arena) const {
  PB_SplitInfo* n = new PB_SplitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PB_SplitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.collaborative.ml.PB_SplitInfo)
  global_split_num_ = 0;
  split_num_vec_.Clear();
}

bool PB_SplitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.collaborative.ml.PB_SplitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 global_split_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_split_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_split_num_vec;
        break;
      }

      // repeated int32 split_num_vec = 2;
      case 2: {
        if (tag == 18) {
         parse_split_num_vec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_split_num_vec())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_split_num_vec())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.collaborative.ml.PB_SplitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.collaborative.ml.PB_SplitInfo)
  return false;
#undef DO_
}

void PB_SplitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.collaborative.ml.PB_SplitInfo)
  // optional int32 global_split_num = 1;
  if (this->global_split_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->global_split_num(), output);
  }

  // repeated int32 split_num_vec = 2;
  if (this->split_num_vec_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_split_num_vec_cached_byte_size_);
  }
  for (int i = 0; i < this->split_num_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->split_num_vec(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.collaborative.ml.PB_SplitInfo)
}

::google::protobuf::uint8* PB_SplitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.collaborative.ml.PB_SplitInfo)
  // optional int32 global_split_num = 1;
  if (this->global_split_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->global_split_num(), target);
  }

  // repeated int32 split_num_vec = 2;
  if (this->split_num_vec_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _split_num_vec_cached_byte_size_, target);
  }
  for (int i = 0; i < this->split_num_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->split_num_vec(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.collaborative.ml.PB_SplitInfo)
  return target;
}

int PB_SplitInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.collaborative.ml.PB_SplitInfo)
  int total_size = 0;

  // optional int32 global_split_num = 1;
  if (this->global_split_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->global_split_num());
  }

  // repeated int32 split_num_vec = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->split_num_vec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->split_num_vec(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _split_num_vec_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_SplitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.collaborative.ml.PB_SplitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PB_SplitInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PB_SplitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.collaborative.ml.PB_SplitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.collaborative.ml.PB_SplitInfo)
    MergeFrom(*source);
  }
}

void PB_SplitInfo::MergeFrom(const PB_SplitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.collaborative.ml.PB_SplitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  split_num_vec_.MergeFrom(from.split_num_vec_);
  if (from.global_split_num() != 0) {
    set_global_split_num(from.global_split_num());
  }
}

void PB_SplitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.collaborative.ml.PB_SplitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_SplitInfo::CopyFrom(const PB_SplitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.collaborative.ml.PB_SplitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SplitInfo::IsInitialized() const {

  return true;
}

void PB_SplitInfo::Swap(PB_SplitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PB_SplitInfo::InternalSwap(PB_SplitInfo* other) {
  std::swap(global_split_num_, other->global_split_num_);
  split_num_vec_.UnsafeArenaSwap(&other->split_num_vec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PB_SplitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_SplitInfo_descriptor_;
  metadata.reflection = PB_SplitInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PB_SplitInfo

// optional int32 global_split_num = 1;
void PB_SplitInfo::clear_global_split_num() {
  global_split_num_ = 0;
}
 ::google::protobuf::int32 PB_SplitInfo::global_split_num() const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_SplitInfo.global_split_num)
  return global_split_num_;
}
 void PB_SplitInfo::set_global_split_num(::google::protobuf::int32 value) {
  
  global_split_num_ = value;
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_SplitInfo.global_split_num)
}

// repeated int32 split_num_vec = 2;
int PB_SplitInfo::split_num_vec_size() const {
  return split_num_vec_.size();
}
void PB_SplitInfo::clear_split_num_vec() {
  split_num_vec_.Clear();
}
 ::google::protobuf::int32 PB_SplitInfo::split_num_vec(int index) const {
  // @@protoc_insertion_point(field_get:com.collaborative.ml.PB_SplitInfo.split_num_vec)
  return split_num_vec_.Get(index);
}
 void PB_SplitInfo::set_split_num_vec(int index, ::google::protobuf::int32 value) {
  split_num_vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.collaborative.ml.PB_SplitInfo.split_num_vec)
}
 void PB_SplitInfo::add_split_num_vec(::google::protobuf::int32 value) {
  split_num_vec_.Add(value);
  // @@protoc_insertion_point(field_add:com.collaborative.ml.PB_SplitInfo.split_num_vec)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_SplitInfo::split_num_vec() const {
  // @@protoc_insertion_point(field_list:com.collaborative.ml.PB_SplitInfo.split_num_vec)
  return split_num_vec_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_SplitInfo::mutable_split_num_vec() {
  // @@protoc_insertion_point(field_mutable_list:com.collaborative.ml.PB_SplitInfo.split_num_vec)
  return &split_num_vec_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ml
}  // namespace collaborative
}  // namespace com

// @@protoc_insertion_point(global_scope)
